 /*******************************************************************************************************************************
 DAZ Studio 4.x Pro - filetype : DAZ Script (.dsa = ascii | .dsb = binary)  
 File Name of this Script : animMorph.ds(a|b) - Released on July 30, 2013 GMT
 
 This new version is replacing the previous versions of 
  - animMorph (for Daz Studio 4.0 Pro) 
  - animMorph2 (for Daz Studio 4.5 Pro) 
  both of them were released on May 2012 
  and published on Marvelous Designer Website (in the freestuff's pages).
 
 The purpose of this new version of the script animMorph is to make it compatible with each version
 of Daz Studio 4.x Pro.  
 It has been developed for Daz Studio 4.x Pro (PC version)
 and tested with Daz Studio 4.0 Pro, Daz Studio 4.5 Pro and Daz Studio 4.6 Pro (versions 64-bit).
 
 This script was inspired by a script published by DREDMARK in Marvelous Designer's Forum.
 However, the script  animMorph is based upon a new algorithm with enhanced performances.
 The algorithm provided in this script is the result of my own research on Animate 2.
 
 Before running this script, a Wavefront Object (.OBJ) sequence needs to be loaded  in the scene
 with the plugin "Morph Loader Pro".
 Then this script creates automatically an animation with the sequence of morphs.
  
 I am grateful to DREDMARK for having shown his solution.
 I put lots of comments to explain the process in this script. :-)
 
 This script is secure : 
 - it doesn't write or read any data on your disks.
 - it doesn't interact with any other applications outside Daz Studio 4.x Pro.
 - it doesn't send or receive any data to or from Internet.

 However, I would recommend you to save your Daz Scene and to save your active works running 
 in other applications before the execution of this script.
 A programmer can NEVER predict everything.

 You may use this script for every purposes. No copyright is bound to my contribution.

Changes - 2021-06-24
  - Add sliders to choose start and end frame. As a consequence, the script no longer uses the morph count for the default values but the active play range. A maximum of 1000 frames has been set for the slider to be usable.
  - Add a morph filter by prefix. Any morph with a name that starts with the prefix will be used.
  - The operation is now cancellable. It is possible to cancel the operation by (long) pressing the <ESC> key.
    - As a side effect, the operation now shows the active frame and the applied morph during its execution
  - UI cleanup.
  
  
********************************************************************************************************************************/

/******************************************************************************************************************************
 Variables for the detection of Daz Manager's Actions used by this script : useful for the compatibility
 of this script with existing (and probably future) subversions of Daz Studio 4 Pro
******************************************************************************************************************************/

var oAction ;									  // variable used to store the value of each Daz Manager Action to be tested
var nActionNextFrame = -1;                      					  // variable used to store the index number of the Action Next Frame
var nActionAddKeys = -1;								  // variable used to store the index number of the Action Add Keys
var sActionText ;								  // variable used to store and compare sequentially each Daz Manager Action Text


/**************************************************************************************************************
 Settings for a RichTextPad DialogBox that will help debugging inside Daz Studio 4.x Pro
**************************************************************************************************************/

var clrWHITE = new Color( 255, 255, 255 ); 					  // color is white for the output in the RichTextPad
var clrBKD = new Color( 100, 140, 250 );       				   	  // color is a discreet blue for some backgrounds
var nMargin = 10;
var nSpacing = 10;											

var wDlgRTP = new DzDialog;							  // it is the Dialog Box which contains the RichTextPad
wDlgRTP.caption = "My Little Debugger :-)";					  // :-)
//wDlgRTP.paletteBackgroundColor = clrBKD 					  // the background has a light blue color
wDlgRTP.sizeGripEnabled = 1; 							  // Dialog Box is resizable by the user (grip is on Bottom Right)

var wDlgRTPLyt = new DzVBoxLayout( wDlgRTP );				          // Layout of this Dialog Box
wDlgRTPLyt.autoAdd = true;							  // Dialog Box Container may extend automatically
wDlgRTPLyt.margin = nMargin;							  // to set the margin inside the Dialog Box
wDlgRTPLyt.spacing = nSpacing;							  // perhaps useful, not sure in this case

var wRichTxt = new DzTextEdit( wDlgRTP );					  // it is the RichTextPad itself
 
wRichTxt.documentTitle = "MyLittleDebugger";				          // why not ?
wRichTxt.clear();								  // let's start with a blank page
wRichTxt.color = clrWHITE;							  // text in white
wRichTxt.pointSize = 8;								  // the value 8 seems to be a good size for the text
 
/***************************************************************** 
 Setting of the variables for the Dialog with the user
*****************************************************************/

var wDlg = new DzDialog;							  // it is the Dialog Box to interact with the user
//wDlg.paletteBackgroundColor = clrBKD ;						  // the background has a light blue color		
wDlg.caption = "ANIMATION WITH A SEQUENCE OF MORPHS - DAZ Studio 4.x Pro" ;

var wDlgLyt = new DzVBoxLayout( wDlg );						  // Layout of this Dialog Box					
wDlgLyt.autoAdd = true;								  // Dialog Box Container may extend automatically
wDlgLyt.margin = nMargin;							  // to set the margin inside the Dialog Box
wDlgLyt.spacing = nSpacing;							  // perhaps useful, not sure in this case

var wComment = new DzGroupBox( wDlg );						  // to store a comment in this Dialog Box

wComment.title = "This script is inspired by a script " 
 + "that DREDMARK published in Marvelous Designer's Forum";
var wCmtLyt = new DzVBoxLayout( wComment );						  // Layout of this Dialog Box					
wCmtLyt.autoAdd = true;								  // Dialog Box Container may extend automatically
wCmtLyt.margin = nMargin;							  // to set the margin inside the Dialog Box
wCmtLyt.spacing = nSpacing;							  // perhaps useful, not sure in this case

var wLineEdit2 = new DzLabel (wComment);
var wLineEdit1 = new DzLabel (wDlg);		  				  // initialisation of some lines in the DialogBox	

var wFirstFrame = new DzIntSlider( wDlg )                       // Initialisation of the range first frame
                                                                // Set to the current play range start frame by default
wFirstFrame.labelVisible = true;
wFirstFrame.label = "First frame to apply a morph to."
wFirstFrame.max = 1000;
wFirstFrame.min = 0;
wFirstFrame.value = 0;
wFirstFrame.clamped = true
wFirstFrame.textEditable = true;

var wLastFrame = new DzIntSlider( wDlg )                      // Initialisation of the range last frame
                                                                // Set to the current play range end frame by default
wLastFrame.labelVisible = true;
wLastFrame.label = "Last frame - May expand animation range."
wLastFrame.max = 1000;
wLastFrame.min = 0;
wLastFrame.value = 0;
wLastFrame.clamped = true
wLastFrame.textEditable = true;

var wMorphPrefixLabel = new DzLabel (wDlg);                     // Morph filter. Any morph with a name starting with
                                                                // the typed text will be used. Leave empty for all morphs
wMorphPrefixLabel.text = "(Optional) Prefix for morph filtering. Leave empty for all morphs." ;
var wMorphPrefix = new DzLineEdit( wDlg ) ;

var wLineEdit3 = new DzLabel (wDlg);
var wLineEdit4 = new DzLabel (wDlg);

/*********************************************************************
Warning Message when the user tries to run this script 
IF no OBJECT is selected in the Scene				  																																 
*********************************************************************/
var oNode = Scene.getPrimarySelection();

if( ! oNode ){									  // the warning message if the user forgot to select the Object
	MessageBox.information( "Please select an Object in the Scene",
      "No selection", "&Ok" ) 
}
 
/***************************************************** 
 Setting of the variables for the Animation
*****************************************************/
var i, j, k; 									  // iterators for the main function

var oObject = oNode.getObject();			  			  // to locate the Selected Object
var oNodeLabel = oNode.getLabel();			  			  // to get the Label of the Selected Object
var nModifiers = oObject.getNumModifiers();  					  // to get the number of morphs loaded for this object

var mgr = MainWindow.getActionMgr();						  // to get the available actions in Daz Studio 4 Pro's Window
var nTimeStep = Scene.getTimeStep();		      				  // the Time Step applied by Daz Studio : a value of 160 is awaited 
										  // please read comment #1 at the end of this script
var nFirstFrame = Scene.getPlayRange().start / nTimeStep;			  // The first frame of the animation play range
var nLastFrame = Scene.getPlayRange().end / nTimeStep ;   		  // the Last Frame of the animation play range
  					
wRichTxt.append ("Time Step = " + nTimeStep);					  // Output to help for debugging	
wRichTxt.append ("First Frame = " + nFirstFrame);
wRichTxt.append ("Last Frame = " + nLastFrame);
 
// wDlgRTP.exec();								  // a first launch of my little debugger :-)    
									          // please read comment #2 at the end of this script
																												
/***************************************************************************************
 Output of comments and instructions in the DialogBox with the user
***************************************************************************************/
wLineEdit1.text = "You selected this object : "+ oNodeLabel;
wLineEdit2.text = "The sequence of morphs "
+ "will be used to create an animation for your selected figure";
wFirstFrame.value = nFirstFrame;
wLastFrame.value = nLastFrame;
wLineEdit3.text = "You may press the <ESC> key at any time during the operation to cancel it.";
wLineEdit4.text = "If you don't want to proceed, please click the CANCEL button."; 

var wDlgAcceptCancel = new DzGroupBox( wDlg );				              // creation of the Group Accept / Cancel 
wDlgAcceptCancel.flat = true;							      // Daz Script Sample "Widget Test" in the DOC was very useful :-)
var wDlgBtnsLyt = new DzGridLayout( wDlgAcceptCancel );
var wAcceptBtn = new DzPushButton( wDlgAcceptCancel );
wAcceptBtn.text = "ACCEPT = PROCEED";
wAcceptBtn.minWidth = 100;
wAcceptBtn.minHeight = 40;
wDlg.setAcceptButton( wAcceptBtn );
wDlgBtnsLyt.addWidget( wAcceptBtn, 0, 2 );
var wCancelBtn = new DzPushButton( wDlgAcceptCancel );
wCancelBtn.text = "CANCEL = DON'T PROCEED";
wCancelBtn.minWidth = 100;
wCancelBtn.minHeight = 40;
wDlg.setRejectButton( wCancelBtn );
wDlgBtnsLyt.addWidget( wCancelBtn, 0, 3 );

 
//°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
if( wDlg.exec() )								      // the user clicked on the "ACCEPT = PROCEED" button
{										      // let's load the sequence of morphs  to convert it into an animation
	load_morphs();  							      // the function [ load_morphs() ] is called
	// wDlgRTP.exec(); 							      // a second launch of my little debugger to see the script's termination
	wRichTxt.append ("Script Terminated");					      // This last output for a happy end :-)
	// wDlgRTP.exec(); 
}
//°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

//__________________________________________________________END OF THE MAIN SECTION___________________________________________________________________________________________


//__________________________________________________________FUNCTION(S) IN THIS SECTION ______________________________________________________________________________________


function load_morphs()											
{ 
  nFirstFrame = wFirstFrame.value ;
  nLastFrame = wLastFrame.value ;
  namePrefix = wMorphPrefix.text ;

  var currentTimeRange = Scene.getAnimRange() ;
  var oTimeRange =  DzTimeRange(0, nTimeStep * nLastFrame); 		          // to determine the Time Range to apply to the Scene
  
  currentTimeRange.include(oTimeRange);               // Make sure the new range includes the selected range

  Scene.setAnimRange( currentTimeRange );						  // Animation Range : the maximum of the current range and the selected end frame.

  
	n = mgr.getNumActions();
       for( i = 0; i < n; i++ ){
            oAction = mgr.getAction( i );					      // Daz Manager Actions are scanned sequentially
            //print(oAction.text);
         wRichTxt.append ( oAction.text + ": " +  i );  			      // script line for debugging purpose
      
      sActionText = oAction.text ;
      
      		 	 if ( sActionText == "Step to Next Frame" ){
      		 	 nActionNextFrame = i ;					      // the action "Step to Next Frame" is found and its index is stored
      	  	  wRichTxt.append ("OK action " + i);            		      // script line for debugging purpose
      		 	 
      				 }
      			 else if ( sActionText == "Create Keys (Selected Nodes)" ) { //"Create Keyframe" ) {
      			 nActionAddKeys = i ;					      // the action "Create Keyframe" is found and its index is stored
      	 	   wRichTxt.append ("OK action " + i);	         		      // script line for debugging purpose
      			 	
      			 }   
             
        } 
	
	
	wRichTxt.append ("Number of Modifiers for this Object " 		      // output to my little debugger :-)
	+ nModifiers);
 
  if ((nActionNextFrame == -1) || (nActionAddKeys == -1))
  {
  	MessageBox.critical( "This script is not designed to work with this version of Daz Studio",
      "Unrecoverable error", "&Ok" ) 
    return;
  }

	oStepNextFrame = mgr.getAction(nActionNextFrame); //   The Action "Step to Next Frame" (DzNextFrameAction) is identified
	oCreateKeyFrame = mgr.getAction(nActionAddKeys); 	//   The Action "Create KeyFrame" (AddKeysAction) is identified
	
  	 				 
	
	/************************************************************
	 It is here that the serious job begins
	 This algorithm is executing a very tedious task
	 ***********************************************************/
	beginUndo();
	Scene.setFrame (nFirstFrame) ;							      // We position the animation on the first selected Frame 
	//oCreateKeyFrame.trigger();						            // Parameters of the selected Object are recorded in this frame
	
  oCurrentModifier = oObject.getModifier(0);        // We initialize the first morph attached to the object
  oPreviousModifier = null;                         // this variable holds the previously recorded morph to reset its value on the next iteration
  
  var j = 0;                                        // The starting index of the modifier search
 
	// Define whether or not the user can cancel
	var bCancellable = true;
  
  // Start the progress
	startBackgroundProgress( "Creating frames for morph animation.", nLastFrame-nFirstFrame+1, bCancellable );

  
  
	for( i = 0; i <= nLastFrame - nFirstFrame ; i++){					      // The iterative process of this algorithm is controlled by the variable i
                                                      // The variable i is incremented by 1 unit with each iteration until its value reaches the Last Frame's value
    
    // If we have defined a prefix to filter morphs, we check if the modifier satisfies the filter
    while (null != oCurrentModifier && !oCurrentModifier.getName().startsWith(namePrefix) && j < oObject.getNumModifiers()) {
      j++;                                            // If not, we increase the modifier index
      oCurrentModifier = oObject.getModifier(j);      // and we get the corresponding modifier
    }
    
    if (null == oCurrentModifier || !oCurrentModifier.getName().startsWith(namePrefix)) {
      MessageBox.critical( "Not enough usable morphs to animate the required frames.",
        "Unrecoverable error", "&Ok" ) 
    } else {
    
      if ( null != oPreviousModifier) {												 
        oPreviousModifier.getValueChannel().setValue(0);			  // The Morph recorded in the previous frame is reset to 0 (0%) to disable its useless interpolation 
      }
                            // This last part of the algorithm is executed for each frame ranging from 0 to the end of the animation
                            
      oPreviousModifier = oCurrentModifier ;            // Store the modifier to reset its value in the next frame
      oCurrentModifier.getValueChannel().setValue(1);				  // The Morph #j is set to 1 (= 100%) 
                                    
      Scene.setFrame (nFirstFrame + i);							                  // The Morphs #j and #k are recorded in each frame #i within the iteration
      oCreateKeyFrame.trigger();						            // THAT'S THE MAGIC ACTION !  Without this action, this script would be a nonsense,
                                                        // because simply "moving to the next step" enables the interpolation process between the morphs				
      j++ ;                                             // Prepare for the next frame
      oCurrentModifier = oObject.getModifier(j);				// oCurrentModifier gets the Modifier #j in the sequence of Morphs
      oStepNextFrame.trigger (i) ;						          // The last action is to move to the next frame in the animation
      
      // If the user is allowed to cancel
      if( bCancellable ){
        // Process events so that we can check user interaction
        processEvents();
   
        // If the user cancelled
        if( App.isKeySequenceDown( "Esc" ) ){
          // Post a status update
          App.statusLine( "User cancelled morph animation." );
          // We are done...
          // Finish the progress
          finishBackgroundProgress();
          return;
        }
      }
    
      App.statusLine( "Morph animation :" + i + "/" + (nLastFrame-nFirstFrame+1) );
    
    }
	}
  // Finish the progress
  finishBackgroundProgress();
  acceptUndo('Animorph');
}
//______________________________________________________________________________________________________________________________________________________________________________

/**************************************** COMMENTS *****************************************************************************************************************************************************
#1 / Time references  in Daz Studio are stored in ticks. There are 4800 ticks per second. Therefore the default setting of 30 FPS (frames per second) in Daz Timeline
will create  4800/30 =160 ticks between each frame. The choice of that time format by Daz Studio Developers is clever ! Because the value of 4800 ticks can be divided
by many values (10, 15, 20, 25, 30, 50, 100, 120 frames per second).
The adjustment of the setting "FPS" in Daz Timeline's pane provides a way to synchronize imported morphs sequence created with a different "FPS".
Please consult the document "2013-03-20-v4-animation.pdf " : "a particular approach of Marvelous Designer's Animation Editor" to learn more about the
synchronization of garment's animation with avatar's animation.

#2 / some lines of this script were disabled ("// wDlgRTP.exec();" = considered as comments ). They are relative to "my little debugger".
It is not useful for the user.
**************************************************************************************************************************************************************************************************************/
